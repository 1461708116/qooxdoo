h4. Homepage

* Improve homepage to include more project informations above the news section.
* Install Wiki, Bugzilla and some other tools

h4. Documentation

* Describe each class using documentation system
* Drag & Drop Support
* Transport

h4. AJAX Layer

# Implement QxRequestQueue
## queuing
## timeouts
## non-caching (IE!)
# Implement QxIFrameTransport
# Implement Data Provider
## json
## xml
## SOAP
## YAML
## AHAH (http://microformats.org/wiki/rest/ahah)
# Implement Data Binding

h4. Layouter Rework

* QxListView is problematic inside complex layout parents like QxDockLayout or inside a QxBoxLayout if the height is defined as a flex (1*) value.
* Speed-up toggling (tree, tabView) without re-layouting of children
* Optimize unit detection and unit handling and storage for dimension and location properties. Try to remove all these boolean flags.
* Move all layout depending properties from widgets to the used layout implementation like in Qt or SWT.
* Try to only have one queue for layouts and jobs
* Omit caching on setting of the value.
* Try to reduce caching stuff (sometimes the cache is probably slower than the (re-)calculation)
* Discuss if it is useful to also cache hasPercentX, hasAutoX, ...
* Reimplement cached properties so that the invaliation will not set the old value to null, but set a isInvalid flag which will define that the next get must re-evaluate the value first.
* Add depth property to widgets. Sort job queue according to depth before flush.
* Remove spacing and margins from inner width/height of each QxParent to calculate percents. (Mail: Stanislav Ievlev, 08.02.2006, 13:18 Uhr)
* Think about additionally supporting dimensions like '100%-10' as in RelativeLayers

h4. Unsorted

* QxDebug: Move styling to script implementation (makes it easier to use debug console outside demos)
* QxDebug: Add ex.fileName and ex.lineNumber to debug output if available
* QxDebug: Allow usage of a newly created window for debug output

* Rename "changeSelection" event of QxSelectionManager to just "change"?

* Better keyboard support:
  http://ecmanaut.blogspot.com/2006/02/javascript-libraries-handling-keyboard.html

* Support tooltipText in QxWidget (to reuse one QxToolTip instance)
* Check this for qooxdoo: http://hartshorne.ca/2006/01/23/javascript_cursor_position/

* QxColorObject has a seperate caching algorithm inside the constructor, which is a bit inefficient as it returns from the constructor call (like the old singletons did).
* QxBorderObject and QxFontObject's caching is implemented inside the *Cache methods which is IMHO the better way. But this makes direct creations of QxBorderObject or QxFontObject inefficient as then each identical border or font creates its own object.

* Support image path updates also for background images in QxWidgets. This needs some registration
  mechanism like the ones in normal QxImages.

* Add dynamically generated debug console (which does not need a "div" inside the document)
* Maybe implement possibility of debug console as separate window
* Add generated debug console (which does not need a "div" inside the document)

* Add behaviour support
* Add Mac OS X Theme

* Add QxHiddenField widget (should be not a real widget)
* Add QxAccordionWidget (naming?)
* Add QxSlider
* Add QxScrollBar
* Add QxSplitPane
* Add QxDataPicker
* Add QxFontPicker

* Reimplement QxColorSelector

* QxFontTheme

* Accelerator support for QxAtom
* Add overflow fallback handling to layouts (show a menu at the end when the toolbar is to small)

* Support for multiple images in one image source (clipping)

* Recursive Enabling/Disabling of Widgets
* ImagePreloader should support forced reload of existing images (using a random get parameter)
* Add resize events which will be fired if widgets like QxWindow are resized by the user
* Add focus groups (e.g. radio buttons are handled as a single group)

* Add Object registry (and use id and/or name properties for this; forms)
* Automatic method bindings from QxSelectionManager to bounded widget
* Support overflow 'auto' with 'auto' width or(/and?) height
* Support splitted overflow properties "overflow-x/y" in gecko-1.8 (split overflow properties for this?)

* Support horizontal scrolling in QxListView
* After this: Support horizontal virtual scrolling in QxListView

* Compiler (mass recreation of an complete initialized application)
* Add Property Compiler (only compiles the property methods)
* Complete new python script to compile source and create documentation
* qooxdoo class tree (documentation) as QxTree

* Add Encoders/Decoders section (md5, blowfish, ...)
* Add Transformers (QxTextile, ...) section
* "virtual mode" was removed from QxNativeWindow; Maybe experiment and re-implement?

* Some rounded borners like nifty corners or these ones: http://www.456bereastreet.com/archive/200505/transparent_custom_corners_and_borders/
* Merge some ideas from "prototype" and "moo.fx" to qooxdoo

* Field validation
* i18n support
* Crypto features
