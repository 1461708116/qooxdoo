====== TODO =======

===== Homepage =====

  * Move TODO issues into bugzilla
  * Bugzilla styling
  * Blog and News Section

===== Transport =====

  * Find consistent solution for setData() in POST, setParameter() in GET
  * Improve ''IFrameTransport'' (hidden fields in form submission)
  * Support for file uploads (''IFrameTransport'')

  * Implement Data Provider
    - json
    - xml
    - SOAP
    - YAML
    - AHAH (http://microformats.org/wiki/rest/ahah)
  * Implement Data Binding

===== Layout =====

  * ''ListView'' is problematic inside complex layout parents like ''DockLayout'' or inside a ''BoxLayout'' if the height is defined as a flex (1*) value.
  * Allow access to computed values at any time.
  * Remove spacing and margins from inner width/height of each ''Parent'' to calculate percents. (Mail: Stanislav Ievlev, 08.02.2006, 13:18 Uhr)
  * Think about additionally supporting dimensions like '100%-10' as in RelativeLayers

  * Optimize unit detection and unit handling and storage for dimension and location properties. Try to remove all these boolean flags.
  * Move all layout depending properties from widgets to the used layout implementation like in Qt or SWT.
  * Try to only have one queue for layouts and jobs

  * Omit caching on setting of the value.
  * Try to reduce caching stuff (sometimes the cache is probably slower than the (re-)calculation)
  * Discuss if it is useful to also cache hasPercentX, hasAutoX, ...
  * Reimplement cached properties so that the invaliation will not set the old value to null, but set a isInvalid flag which will define that the next get must re-evaluate the value first.

  * Speed-up toggling (tree, tabView) without re-layouting of children
  * Add depth property to widgets. Sort job queue according to depth before flush.

  * Introduce ''ClientSupport'', which stores if the client supports min/max or top/bottom stretching and also other non layout relevant stuff.

  * Add overflow fallback handling to layouts (e.g. show a menu at the end when the toolbar is to small)
  * Support overflow 'auto' with 'auto' width or(/and?) height
  * Support splitted overflow properties "overflow-x/y" in gecko-1.8 (split overflow properties for this?)

===== Widgets (New) =====

  * Add ''ScrollBar''
  * Add ''SplitPane''
  * Add ''Slider''
  * Add ''ProgressBar''
  * Add ''SplashScreen''
  * Add ''HiddenField'' widget (does not have to be a real widget)
  * Add ''Accordion''
  * Add ''FontPicker'' (Popup)
  * Reimplement ''ColorPresetPopup'' (Popup)

===== Widgets (Modifications) =====

  * Finish ''Table'' (performance, features)
  * Support horizontal virtual scrolling in ''Table''

  * Map scrollLeft and scrollTop getters/setter of ''Iframe'' to the iframe node
  * Accelerator support for ''Atom''
  * Support tooltipText in ''Widget'' (to reuse one ''ToolTip'' instance)
  * Integration of context menues
  * Some rounded borners like nifty corners or these ones: http://www.456bereastreet.com/archive/200505/transparent_custom_corners_and_borders/

  * Rename "changeSelection" event of QxSelectionManager to just "change"?
  * Automatic method bindings from QxSelectionManager to bounded widget

  * Add resize events which will be fired if widgets are resized, e.g. ''Window''
  * Dedicated events in ''Window'' handling ("maximize", etc.)

  * Image-based ''CheckBox'', ''RadioButton''
  * Add focus groups (e.g. radio buttons are handled as a single group)

  * Virtual widgets (''Tree'')
  * "virtual mode" was removed from ''NativeWindow''; Maybe experiment and re-implement (IE performance)?

===== Images =====

  * Support for multiple images in one image source (clipping) (see ActiveWidgets)
  * Support image path updates also for background images in ''Widget''. This needs some registration mechanism like the ones in normal ''Image''.
  * ''ImagePreloader'' should support forced reload of existing images (using a random get parameter), refresh()

===== Performance, Optimization =====

  * Clean-up or optimize code of namespaces branch

  * Convert: ''MouseEvent'' and ''KeyEvent'' to singletons.
  * Add instance pooling feature to ''Transport'' API, ''Event'' and other mass-created objects.

  * ''ColorObject'' has a seperate caching algorithm inside the constructor, which is a bit inefficient as it returns from the constructor call (like the old singletons did).
  * ''BorderObject'' and ''FontObject'' caching is implemented inside the *Cache methods which is the better way. But this makes direct creation of ''BorderObject'' or ''FontObject'' inefficient as then each identical border or font creates its own object.

  * Rework addProperty(). Default values to be applied at instantiation (calling _modify*()). Related to theming challenges.

  * Object disposing (array slicing, etc.)

===== Logging, Debugging =====

  * Add dynamically generated debug console (which does not need a "div" inside the document)
  * Make debug console work in Opera again

===== Theming =====

  * Appearance (problems in run-time switching, most visible in dimension changes, padding/margin). Related to current property system that does not account for user-supplied values, i.e. does not support priorities.
  * Recursive Enabling/Disabling of Widgets (Related to property rework, property inheritance (maybe we could inform us how to implement inheritance generally)) (user defined vs. appearance defined vs. inheritance defined)
  * QxFontTheme
  * Add additional themes (Mac OS X, etc.)
  * Rework color names (move away from windows colorthemes to also also allow colors for tabs and hover buttons)

===== Build tools =====

  * New wording: #module() instead of #package()
  * Theme support (e.g. copying images for icon themes via include/exclude command-line parameters)
  * User application support (custom classes)
  * Support for static content (html, images)
  * Automatic dependeny resolving (#use())
  * Build support for specific browsers (#ifdef())
  * Fine-grained linking (method level, not class level)
  * Remove unneccessary semicolons after closing brackets
  * Unify code comments (JavaDoc-like)
  * Serialization (mass recreation of an complete initialized application)
  * Configuration presets (Ajax-only, etc.). Support for automatic release generation.
  * Rebuild demos (widget browser?)

===== Ideas from other sources =====

  * URL Handling (also take a look at contributions/urlhandling_vegetti)
  * qx.io.local.flash and similar wrappers according to Dojo Storage.
  * Merge some ideas from other open-source libraries ("Dojo", "MochiKit", "Prototype","moo.fx")
  * Better keyboard support: http://ecmanaut.blogspot.com/2006/02/javascript-libraries-handling-keyboard.html
  * Check this for qooxdoo: http://hartshorne.ca/2006/01/23/javascript_cursor_position/

===== Form Handling =====

  * Add Object registry (and use id and/or name properties for this; forms)

  * Form handling
  * FormUtils
  * Field validation

===== Internationlisation (i18n) =====

  * Add ''Bundle'' support
  * Dynamic runtime switching support
  * Add handling to objects which interact with internationalized string information. How to differ between bundle-IDs and real label strings?

===== User Application =====

  * User application
  * Components
  * Parts

===== Encoding =====

  * Add Encoders/Decoders section (md5, blowfish, ...)

===== Miscellaneous =====

  * Add behaviour support (later)

  * Extended browser support (Opera, Safari)

==== Done ====

  * Improve homepage to include more project informations above the news section.
  * Install Wiki, Bugzilla and some other tools

  * Add QxDatePicker
  * Reimplement QxColorSelector

  * QxDebug: Allow usage of a newly created window for debug output
  * Maybe implement possibility of debug console as separate window

  * qooxdoo class tree (documentation) as QxTree

  - Implement QxRequestQueue (Done)
    - queuing (Done)
    - timeouts (Done)
    - non-caching (IE!) (Done)
  * Implement QxIFrameTransport (Done, but without hidden fields in form submission)

