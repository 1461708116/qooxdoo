{

  // TODO:
  //  * if several values from array are allowed how to define in schema (e.g. api job)
  //    => enum with all distinct permutations possible but cumbersome
  //  * enforce empty keys? (e.g. collect-environment-info job)
  //  * how to escape keywords? (e.g. dependencies job)
  //  * allow two types (e.g. shell job string|array)
  //    * also problem with macros (macro is string and expands to array => "${LOCALES} not of type array" :/)
  //    => expand macros first (before schema check)
  //  * add all env keys?
  //    * http://demo.qooxdoo.org/current/apiviewer/#qx.core.Environment
  //  * regex
  //    * global let (let job => uppercase)? how to define constraints for keys?

  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "http://qooxdoo.org",
  "name": "config.json",
  "type": "object",
  "required": ["name", "include", "let"],
  "properties": {
    "name": {
      "description": "A name / short description for the configuration file.",
      "type": "string"
    },
    "include": {
      "description": "A list of libraries to include; each library is represented by a map.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "path": { "type": "string" },
          "as": { "type": "string" },
          "import": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "block": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "export": {
      "description": "A list of job names exported by this configuration.",
      "type": "array",
       "items": { "type": "string" }
    },
    "default-job": { "type": "string" },
    "let": {
      "description": "A global map of macros; this will be included in every job.",
      "type": "object",
      "properties": {
        "ROOT": { "type": "string" },
        "QOOXDOO_PATH": { "type": "string" },
        "CACHE": { "type": "string" },
        "CACHE_KEY": {
          "type": "object",
          "properties": {
            "compile": {
              "description": "path to the 'main' cache, the directory where compile results are cached, relative to the current (default: './cache').",
              "type": "string"
            },
            "downloads": {
              "description": "directory where to put downloads (e.g. contrib:// libraries), relative to the current (default: './cache-downloads').",
              "type": "string"
            },
            "invalidate-on-tool-change": {
                "type": "boolean"
            }
          }
        },
        "QXTHEME": { "type": "string" },
        "QXICONTHEME": {
            "type": "array",
            "items": { "type": "string" }
        },
        "OPTIMIZE": {
          "type": "array",
          "items": { "type": "string" }
        },
        "LOCALES": {
          "type": "array",
          "items": { "type": "string" }
        },
        "APPLICATION": { "type": "string" },
        "APPLICATION_MAIN_CLASS": { "type": "string" },
        "ADD_NOCACHE_PARAM": { "type": "boolean" },
        "COMPILE_WITH_LINT": { "type": "boolean" },
        "API_EXCLUDE": {
         "type": "array",
          "items": { "type": "string" }
        },
        "SOURCE_PATH": { "type": "string" },
        "BUILD_PATH": { "type": "string" }
      }
    },
    "jobs": {
      "description" : "A map of job entries.",
      "type": "object",
      "properties": {
        "{{template}}": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "add-css":                   { "$ref": "#/definitions/add-css" },
            "=add-css":                  { "$ref": "#/definitions/add-css" },
            "add-script":                { "$ref": "#/definitions/add-script" },
            "=add-script":               { "$ref": "#/definitions/add-script" },
            "api":                       { "$ref": "#/definitions/api" },
            "=api":                      { "$ref": "#/definitions/api" },
            "asset-let":                 { "$ref": "#/definitions/asset-let" },
            "=asset-let":                { "$ref": "#/definitions/asset-let" },
            "cache":                     { "$ref": "#/definitions/cache" },
            "=cache":                    { "$ref": "#/definitions/cache" },
            "clean-files":               { "$ref": "#/definitions/clean-files" },
            "=clean-files":              { "$ref": "#/definitions/clean-files" },
            "collect-environment-info":  { "$ref": "#/definitions/collect-environment-info" },
            "=collect-environment-info": { "$ref": "#/definitions/collect-environment-info" },
            "combine-images":            { "$ref": "#/definitions/combine-images" },
            "=combine-images":           { "$ref": "#/definitions/combine-images" },
            "compile":                   { "$ref": "#/definitions/compile" },
            "=compile":                  { "$ref": "#/definitions/compile" },
            "compile-options":           { "$ref": "#/definitions/compile-options" },
            "=compile-options":          { "$ref": "#/definitions/compile-options" },
            "config-warnings":           { "$ref": "#/definitions/config-warnings" },
            "=config-warnings":          { "$ref": "#/definitions/config-warnings" },
            "copy-files":                { "$ref": "#/definitions/copy-files" },
            "=copy-files":               { "$ref": "#/definitions/copy-files" },
            "copy-resources":            { "$ref": "#/definitions/copy-resources" },
            "=copy-resources":           { "$ref": "#/definitions/copy-resources" },
            "default-job":               { "$ref": "#/definitions/default-job" },
            "=default-job":              { "$ref": "#/definitions/default-job" },
            "dependencies~":             { "$ref": "#/definitions/dependencies~" },
            "=dependencies~":            { "$ref": "#/definitions/dependencies~" },
            "desc":                      { "$ref": "#/definitions/desc" },
            "=desc":                     { "$ref": "#/definitions/desc" },
            "environment":               { "$ref": "#/definitions/environment" },
            "=environment":              { "$ref": "#/definitions/environment" },
            "exclude":                   { "$ref": "#/definitions/exclude" },
            "=exclude":                  { "$ref": "#/definitions/exclude" },
            "export":                    { "$ref": "#/definitions/export" },
            "=export":                   { "$ref": "#/definitions/export" },
            "extend":                    { "$ref": "#/definitions/extend" },
            "=extend":                   { "$ref": "#/definitions/extend" },
            "fix-files":                 { "$ref": "#/definitions/fix-files" },
            "=fix-files":                { "$ref": "#/definitions/fix-files" },
            "include":                   { "$ref": "#/definitions/include" },
            "=include":                  { "$ref": "#/definitions/include" },
            "jobs":                      { "$ref": "#/definitions/jobs" },
            "=jobs":                     { "$ref": "#/definitions/jobs" },
            "let":                       { "$ref": "#/definitions/let" },
            "=let":                      { "$ref": "#/definitions/let" },
            "library":                   { "$ref": "#/definitions/library" },
            "=library":                  { "$ref": "#/definitions/library" },
            "lint-check":                { "$ref": "#/definitions/lint-check" },
            "=lint-check":               { "$ref": "#/definitions/lint-check" },
            "log":                       { "$ref": "#/definitions/log" },
            "=log":                      { "$ref": "#/definitions/log" },
            "manifest-validate":         { "$ref": "#/definitions/manifest-validate" },
            "=manifest-validate":        { "$ref": "#/definitions/manifest-validate" },
            "migrate-files":             { "$ref": "#/definitions/migrate-files" },
            "=migrate-files":            { "$ref": "#/definitions/migrate-files" },
            "name":                      { "$ref": "#/definitions/name" },
            "=name":                     { "$ref": "#/definitions/name" },
            "packages":                  { "$ref": "#/definitions/packages" },
            "=packages":                 { "$ref": "#/definitions/packages" },
            "pretty-print":              { "$ref": "#/definitions/pretty-print" },
            "=pretty-print":             { "$ref": "#/definitions/pretty-print" },
            "provider":                  { "$ref": "#/definitions/provider" },
            "=provider":                 { "$ref": "#/definitions/provider" },
            "require":                   { "$ref": "#/definitions/require" },
            "=require":                  { "$ref": "#/definitions/require" },
            "run":                       { "$ref": "#/definitions/run" },
            "=run":                      { "$ref": "#/definitions/run" },
            "shell":                     { "$ref": "#/definitions/shell" },
            "=shell":                    { "$ref": "#/definitions/shell" },
            "simulate":                  { "$ref": "#/definitions/simulate" },
            "=simulate":                 { "$ref": "#/definitions/simulate" },
            "slice-images":              { "$ref": "#/definitions/slice-images" },
            "=slice-images":             { "$ref": "#/definitions/slice-images" },
            "translate":                 { "$ref": "#/definitions/translate" },
            "=translate":                { "$ref": "#/definitions/translate" },
            "use":                       { "$ref": "#/definitions/use" },
            "=use":                      { "$ref": "#/definitions/use" },
            "watch-files":               { "$ref": "#/definitions/watch-files" },
            "=watch-files":              { "$ref": "#/definitions/watch-files" },
            "web-server":                { "$ref": "#/definitions/web-server" },
            "=web-server":               { "$ref": "#/definitions/web-server" },
            "web-server-config":         { "$ref": "#/definitions/web-server-config" },
            "=web-server-config":        { "$ref": "#/definitions/web-server-config" }
          }
        },
        // http://manual.qooxdoo.org/devel/pages/tool/generator/default_jobs_actions.html
        "api": {},
        "api-data": {},
        "build": {},
        "clean": {},
        "distclean": {},
        "fix": {},
        "info": {},
        "inspector": {},
        "lint": {},
        "migration": {},
        "simulation-build": {},
        "simulation-run": {},
        "pretty": {},
        "source": {},
        "source-all": {},
        "source-hybrid": {},
        "source-server": {},
        "source-httpd-config": {},
        "test-source": {},
        "test-inline": {},
        "test-native": {},
        "translation": {},
        "watch": {},
        "watch-scss": {},
        // http://manual.qooxdoo.org/devel/pages/tool/generator/default_jobs_includers.html
        "cache": {},
        "common": {},
        "includes": {},
        "libraries": {},
        "profiling": {},
        "log-parts": {},
        "log-dependencies": {},
        // base.json
        "scan-local-lib": {},
        "source-script-compopts": {},
        "source-script": {},
        "source-all-script": {},
        "build-script": {},
        "build-files": {},
        "build-resources": {},
        "provider": {},
        "provider-deps": {},
        "provider-classes": {},
        "dependencies": {},
        "clean-cache": {},
        "publish": {},
        "log-dependencies-dot": {},
        "manifest-validation": {},
        // application.json
        "inspector-resources": {},
        "inspector-script": {},
        "inspector-files": {},
        "test-basic": {},
        "test-basic-source": {},
        "test-mobile": {},
        "test-mobile-source": {},
        "simulation-run-source": {},
        "simulation-source": {}
      }
    }
  },
  "definitions": {
    // http://manual.qooxdoo.org/devel/pages/tool/generator/generator_config_ref.html
    "add-css": {
      "type": "array",
      "additionalProperties": false,
      "items": {
        "type": "object",
        "properties": {
          "uri": { "type": "string" }
        }
      }
    },
    "add-script": {
      "type": "array",
      "additionalProperties": false,
      "items": {
        "type": "object",
        "properties": {
          "uri": { "type": "string" }
        }
      }
    },
    "api": {
      "description" : "Triggers the generation of a custom Apiviewer application.",
      "type": "object",
      "properties": {
        "path": { "type": "string" },
        "sitemap": {
          "type": "object",
          "properties": {
            "file": { "type": "string" },
            "link-uri": { "type": "string" }
          }
        },
        "verify": {
          "enum" : [ ["links"], ["types"], ["statistics"],
                     ["links", "types"], ["links", "statistics"], ["types", "statistics"],
                     ["links", "types", "statistics"] ]
        },
        "warnings": {
          "type": "object",
          "properties": {
            "output": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      }
    },
    "asset-let": {
      "description" : "Defines theme keys that will be replaced in #asset hints in source files. (See special section on the 'themes' key).",
      "type": "object"
    },
    "cache": {
      "description": "Define the paths to cache directories, particularly to the compile cache.",
      "type": "object",
      "properties": {
        "compile": {
          "description": "path to the 'main' cache, the directory where compile results are cached, relative to the current (default: './cache').",
          "type": "string"
        },
        "downloads": {
          "description": "directory where to put downloads (e.g. contrib:// libraries), relative to the current (default: './cache-downloads').",
          "type": "string"
        },
        "invalidate-on-tool-change": {
            "type": "boolean"
        }
      }
    },
    "clean-files": {
      "description": "Triggers clean-up of files and directories within a project and the framework, e.g. deletion of generated files, cache contents, etc.",
      "type": "object",
      "additionalProperties": {
         "type": "array",
         "items": { "type": "string" }
      }
    },
    "collect-environment-info": { "type": "object" },
    "combine-images": {
      "description": "Triggers creation of a combined image file that contains various images.",
      "type": "object",
      "properties": {
        "montage-cmd": { "type": "string" },
        "images": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "input": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "prefix": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              },
              "layout": {
                "enum": ["horizontal", "vertical"]
              },
              "prefix": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "compile": {
      "description": "Triggers generation of a source or build version of the application.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "enum": ["source", "build", "hybrid"]
        }
      }
    },
    "compile-options": {
      "description" : "General compile options, a super-set of source and build options.",
      "type": "object",
      "properties": {
        "paths": {
          "type": "object",
          "properties": {
            "file": { "type": "string" },
            "file-prefix": { "type": "string" },
            "app-root": { "type": "string" },
            "gzip": { "type": "boolean" },
            "loader-template": { "type": "string" }
          }
        },
        "uris": {
          "type": "object",
          "properties": {
            "script": { "type": "string" },
            "ressource": { "type": "string" },
            "add-nocache-param": { "type": "boolean" }
          }
        },
        "code": {
          "type": "object",
          "properties": {
            "format": { "type": "boolean" },
            "locales": {
              "type": "array",
              "items": { "type": "string" }
            },
            "optimize": {
              "type": "array",
              "items": { "type": "string" }
            },
            "decode-uris-plug": { "type": "string" },
            "except": {
              "type": "array",
              "items": { "type": "string" }
            },
            "lint-check": { "type": "boolean" }
          }
        }
      }
    },
    "config-warnings": {
      "type": "object"
    },
    "copy-files": {
      "description": "Triggers files/directories to be copied, usually between source and build version.",
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": { "type": "string" }
        },
        "source": { "type": "string" },
        "target": { "type": "string" }
      }
    },
    "copy-resources": {
      "description": "Triggers the copying of resources, usually between source and build version.",
      "type": "object",
      "properties": {
        "target": { "type": "string" }
      }
    },
    "default-job": {
      "type": "string"
    },
    "dependencies~": {
      "type": "object",
      "properties": {
        "follow-static-initializers": { "type": "boolean" },
        "sort-topological": { "type": "boolean" }
      }
    },
    "desc": { "type": "string" },
    "environment": {
      "description": "Define global key:value pairs for the generated application.",
      "type": "object"
    },
    "exclude": {
      "type": "array",
      "items": { "type": "string" }
    },
    "export": {
      "type": "array",
      "items": { "type": "string" }
    },
    "extend": {
      "description": "Extend the current job with other jobs. Takes an array of job names. The information of these jobs are merged into the current job description, so the current job sort of “inherits” their settings. (See the special section on 'extend' semantics).",
      "type": "array",
      "items": { "type": "string" }
    },
    "fix-files": {
      "type": "object",
      "properties": {
        "eol-style": { "enum": ["LF", "CR", "CRLF"] },
        "tab-width": { "type": "number" }
      }
    },
    "include": {
      "description": "List classes to be processed in the job. Takes an array of class specifiers.",
      "type": "array",
      "items": { "type": "string" }
    },
    "jobs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "let": {
      "description": "Define macros. Takes a map where each key defines a macro and the value its expansion.",
      "type": "object"
    },
    "library": {
      "description": "Define libraries to be taken into account for this job. Takes an array of maps, each map specifying one library to consider. The most important part therein is the “manifest” specification. (See special section on Manifest files).",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "manifest": { "type": "string" },
          "uri": { "type": "string" }
        }
      }
    },
    "lint-check": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "allowed-globals": {
          "type": "array",
          "items": { "type": "string" }
        },
        "ignore-catch-param": { "type": "boolean" },
        "ignore-deprecated-symbols": { "type": "boolean" },
        "ignore-environment-nonlit-key": { "type": "boolean" },
        "ignore-finally-without-catch": { "type": "boolean" },
        "ignore-multiple-mapkeys": { "type": "boolean" },
        "ignore-multiple-vardecls": { "type": "boolean" },
        "ignore-no-loop-block": { "type": "boolean" },
        "ignore-reference-fields": { "type": "boolean" },
        "ignore-undeclared-privates": { "type": "boolean" },
        "ignore-undefined-globals": { "type": "boolean" },
        "ignore-unused-parameter": { "type": "boolean" },
        "ignore-unused-variables": { "type": "boolean" },
        "run": { "type": "boolean" },
        "warn-jsdoc-key-syntax": { "type": "boolean" },
        "warn-unknown-jsdoc-keys": { "type": "boolean" }
      }
    },
    "log": {
      "type": "object",
      "properties": {
        "classes-unused": {
          "type": "array",
          "items": { "type": "string" }
        },
        "dependencies~": {
          "type": "object",
          "properties": {
            "type": { "enum" : ["using", "used-by"] },
            "phase": { "enum" : ["runtime", "loadtime", null] },
            "include-transitive-load-deps": { "type": "boolean" },
            "format": { "enum" : ["txt", "dot", "json", "provider", "flare", "term"] },
            "dot": {
              "type": "object",
              "properties": {
                "root": { "type": "string" },
                "file": { "type": "string" },
                "radius": { "type": "number" },
                "span-tree-only": { "type": "boolean" },
                "compiled-class-size": { "type": "boolean" }
              }
            },
            "json": {
              "type": "object",
              "properties": {
                "file": { "type": "string" },
                "pretty": { "type": "boolean" }
              }
            },
            "flare": {
              "type": "object",
              "properties": {
                "file": { "type": "string" },
                "pretty": { "type": "boolean" }
              }
            }
          }
        },
        "filter": {
          "type": "object",
          "properties": {
            "debug": {
                "type": "array",
                "items": { "type": "string" }
            }
          }
        },
        "privates": { "enum": ["on", "off"] },
        "resources": {
          "type": "object",
          "properties": {
            "file": {
                "type": "string"
            }
          }
        },
        "translations": {
          "type": "object",
          "properties": {
            "untranslated-keys": {
              "type": "object",
              "properties": {
                "skip-locales": {
                    "type": "array",
                    "items": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "manifest-validate": { "type": "object" },
    "migrate-files": {
      "type": "object",
      "properties": {
        "from-version": { "type": "string" },
        "migrate-html": { "type": "boolean" }
      }
    },
    "name": {
      "type": "object"
    },
    "packages": {
      "description" : "Define packages for the application. (See special section on packages).",
      "type": "object"
    },
    "pretty-print": {
      "description" : "Triggers code beautification of source class files (in-place-editing). An empty map value triggers default formatting, but further keys can tailor the output.",
      "type": "object"
    },
    "provider": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "app-root": { "type": "string" },
        "include": {
          "type": "array",
            "items": { "type": "string" }
        },
        "exclude": {
          "type": "array",
          "items": { "type": "string" }
        },
        "compile": {
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "require": {
      "description": "Define prerequisite classes. Takes a map, where the keys are class names and the values lists of prerequisite classes.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "run": {
      "description" : "Define a list of jobs to run in place of the current job. (See the special section on 'run' semantics).",
      "type": "array",
      "items": { "type": "string" }
    },
    "shell": {
      "description" : "Triggers the execution of an external command.",
      "type": "object"
    },
    "simulate": {
      "type": "object",
      "properties": {
        "java-classpath": {
          "type": "array",
          "items": { "type": "string" }
        },
        "qxselenium-path": { "type": "string" },
        "rhino-class": { "type": "string" },
        "simulator-script": { "type": "string" }
      }
    },
    "slice-images": {
      "description" : "Triggers cutting images into regions.",
      "type": "object",
      "properties": {
        "converter-cmd": { "type": "string" },
        "images": {
          "type": "object"
        }
      }
    },
    "translate": {
      "description" : "(Re-)generate .po files from source classes.",
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": { "type": "string" }
        },
        "locales": {
          "type": "array",
          "items": { "type": "string" }
        },
        "profiles-with-metadata": { "type": "boolean" },
        "poentry-with-occurences": { "type": "boolean" }
      }
    },
    "use": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "watch-files": {
      "type": "object"
    },
    "web-server": {
      "type": "object"
    },
    "web-server-config": {
      "type": "object"
    }
  }
}
